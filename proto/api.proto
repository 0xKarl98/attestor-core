syntax = "proto3";
package reclaim_witness;

enum TranscriptMessageSenderType {
	TRANSCRIPT_MESSAGE_SENDER_TYPE_UNKNOWN = 0;
	TRANSCRIPT_MESSAGE_SENDER_TYPE_CLIENT = 1;
	TRANSCRIPT_MESSAGE_SENDER_TYPE_SERVER = 2;
}

enum ServiceSignatureType {
	SERVICE_SIGNATURE_TYPE_UNKNOWN = 0;
	/**
	 * ETH keys & signature
	 * keys: secp256k1
	 * signature: ethereum flavor of ECDSA (https://goethereumbook.org/signature-generate/)
	 */
	SERVICE_SIGNATURE_TYPE_ETH = 1;
}

enum WitnessVersion {
	WITNESS_VERSION_UNKNOWN = 0;
	WITNESS_VERSION_1_0_0 = 1;
	WITNESS_VERSION_1_1_0 = 2;
	WITNESS_VERSION_2_0_0 = 3;
}

enum BeaconType {
	BEACON_TYPE_UNKNOWN = 0;
	BEACON_TYPE_SMART_CONTRACT = 1;
	BEACON_TYPE_RECLAIM_TRUSTED = 2;
}

enum WitnessErrorCode {
	// 0 should be treated as the absence of an error
	WITNESS_ERROR_NO_ERROR = 0;
	WITNESS_ERROR_INTERNAL = 1;
	WITNESS_ERROR_BAD_REQUEST = 2;
	WITNESS_ERROR_NOT_FOUND = 3;
	WITNESS_ERROR_PROXY_ERROR = 4;
	WITNESS_ERROR_INVALID_CLAIM = 5;
}

message ProviderClaimData {
	/**
	 * Name of the provider to generate the
	 * claim using.
	 * @example "http"
	 */
	string provider = 1;
	/**
	 * Canonically JSON stringified parameters
	 * of the claim, as specified by the provider.
	 * @example '{"url":"https://example.com","method":"GET"}'
	 */
	string parameters = 2;
	/**
	 * Owner of the claim. Must be the public key/address
	 * @example "0x1234..."
	 */
	string owner = 3;
	/**
	 * Unix timestamp in seconds of the claim being made.
	 * Cannot be more than 10 minutes in the past or future
	 */
	uint32 timestampS = 4;
	/**
	 * Any additional data you want to store with the claim.
	 * Also expected to be a canonical JSON string.
	 */
	string context = 6;
	/**
	 * identifier of the claim;
	 * Hash of (provider, parameters, context)
	 */
	string identifier = 8;
	/**
	 * Legacy V1 Beacon epoch number
	 */
	uint32 epoch = 9;
}

message ProviderClaimInfo {
	string provider = 1;
	string parameters = 2;
	string context = 6;
}

message BeaconIdentifier {
	/** 
	 * type of beacon
	 */
	BeaconType type = 1;
	/** 
	 * ID of the Beacon.
	 * For smart contract, it's the chain ID.
	 */
	string id = 2;
}

message WitnessErrorData {
	WitnessErrorCode code = 1;
	string message = 2;
	string data = 3;
}

message CreateTunnelRequest {
	/**
	 * Assign a unique ID to the client for this tunnel
	 * request. This ID will be used to identify the tunnel
	 * to later send messages or disconnect the tunnel.
	 */
	uint32 id = 1;
	string host = 2;
	uint32 port = 3;
	/**
	 * Geo location from which the request will be made.
	 * Provide 2 letter ISO country code. Leave empty
	 * if you don't want to use geo location.
	 *
	 * Geo location is implemented using an https proxy
	 * eg. US, IN, GB, etc.
	 */
	string geoLocation = 4;
}

message DisconnectTunnelRequest {
	uint32 id = 1;
}

message Empty {
	// empty message
}

message TunnelMessage {
	/** ID of the tunnel where this message belongs */
	uint32 tunnelId = 1;
	bytes message = 2;
}

message TunnelDisconnectEvent {
	uint32 tunnelId = 1;
	WitnessErrorData error = 2;
}

message MessageReveal {
	oneof reveal {
		// direct reveal of the block via the key & IV
		// cipher (aes, chacha) for decryption
		// selected based on `cipherSuite`
		// determined by the server hello packet
		MessageRevealDirect directReveal = 1;
		// partially or fully reveal the block via a zk proof
		MessageRevealZk zkReveal = 2;
	}

	message MessageRevealDirect {
		/** key for the block */
		bytes key = 1;
		/** IV for the block */
		bytes iv = 2;
		/**
		* used to generate IV in authenticated
		* cipher suites
		*/
		uint32 recordNumber = 3;
	}

	message MessageRevealZk {
		repeated ZKProof proofs = 1;
	}

	message ZKProof {
		/** JSON encoded snarkJS proof */
		string proofJson = 1;
		/** the decrypted ciphertext as output by the ZK proof */
		bytes decryptedRedactedCiphertext = 2;
		/** the plaintext that is fully or partially revealed */
		bytes redactedPlaintext = 3;
		/**
		* start of this specific block
		* in the redactedPlaintext
		*/
		uint32 startIdx = 4;
	}
}

message ClaimRequestData {
	string provider = 1;
	string parameters = 2;
	/**
	 * Owner of the claim. Must be the public key/address
	 * of the signatures
	 */
	string owner = 3;
	/**
	 * Timestamp of the claim being made.
	 * Cannot be more than 10 minutes in the past
	 * or in the future
	 */
	uint32 timestampS = 4;
	string context = 5;
}

message ClaimTunnelRequest {
	/**
	 * parameters supplied to establish the tunnel
	 * & connect to the end server
	 */
	CreateTunnelRequest request = 1;
	/**
	 * data describing the claim you want to prove
	 */
	ClaimRequestData data = 2;
	/**
	 * messages from the client & server
	 * in the order they were sent/received
	 *
	 * Attach a proof (if any) to each message
	 * to reveal the contents of the message inside
	 * 
	 * The revealed messages should support the proving
	 * of the claim as defined in the provider's implementation
	 */
	repeated TranscriptMessage transcript = 3;

	Signatures signatures = 4;

	message Signatures {
		/**
		* signature of ClaimTunnelRequest
		* with empty "signatures" field
		*/
		bytes requestSignature = 1;
	}

	message TranscriptMessage {
		/** client or server */
		TranscriptMessageSenderType sender = 1;
		/** packet data */
		bytes message = 2;
		MessageReveal reveal = 3;
	}
}

message ClaimTunnelResponse {
	/**
	 * The original request that was made to claim the tunnel
	 */
	ClaimTunnelRequest request = 1;
	oneof result {
		ProviderClaimData claim = 2;
		WitnessErrorData error = 3;
	}
	Signatures signatures = 4;

	message Signatures {
		/**
		 * Address of the witness that has signed the claim
		 */
		string witnessAddress = 1;
		/** 
		* signature of `stringifyProviderClaimData(claim)`,
		* if the claim was successful
		*/
		bytes claimSignature = 2;
		/**
		 * signature of the complete ClaimTunnelResponse
		 * structure with empty "signatures" field
		 */
		bytes resultSignature = 3;
	}
}

message InitRequest {
	/** Witness client version */
	WitnessVersion clientVersion = 2;
	/** Signature type used & expected by the user */
	ServiceSignatureType signatureType = 3;
}

message RPCMessage {
	/**
	 * Per connection unique RPC message ID. Either party sending a
	 * duplicate ID will do nothing except confuse the other party.
	 *
	 * For response messages, the ID should be the same as the request
	 * to which it is responding.
	 */
	uint64 id = 1;
	// message must be one of the following
	oneof message {
		InitRequest initRequest = 2;
		/**
		 * Response to the init request.
		 * */
		Empty initResponse = 3;
		/**
		 * Data representing an error in the WebSocket connection.
		 * The party sending this message should close the connection
		 * immediately after sending this message.
		 */
		WitnessErrorData connectionTerminationAlert = 4;
		/**
		 * Data representing an error in the witness's
		 * request to the server. This should be sent in case
		 * there was an error in processing the request.
		 */
		WitnessErrorData requestError = 5;
		/**
		 * Create a tunnel to the specified host & port.
		 */
		CreateTunnelRequest createTunnelRequest = 6;
		Empty createTunnelResponse = 7;
		/**
		 * Disconnect a tunnel.
		 */
		DisconnectTunnelRequest disconnectTunnelRequest = 8;
		Empty disconnectTunnelResponse = 9;
		/**
		 * Message to send through a tunnel. Client can send
		 * this message to forward data to the server.
		 */
		TunnelMessage tunnelMessage = 10;
		/**
		 * Event indicating that a tunnel has been disconnected.
		 * The client should not send any more messages through
		 * this tunnel.
		 */
		TunnelDisconnectEvent tunnelDisconnectEvent = 11;
		/**
		 * Using the transcript of a tunnel, make a claim.
		 * The tunnel must be disconnected before making a claim.
		 */
		ClaimTunnelRequest claimTunnelRequest = 12;
		ClaimTunnelResponse claimTunnelResponse = 13;
	}
}

message RPCMessages {
	repeated RPCMessage messages = 1;
}